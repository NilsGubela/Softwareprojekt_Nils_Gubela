a <- seq(-6, 18, by = .01)
# Choose the mean as 2.5 and standard deviation as 0.5.
b <- dnorm(a ,mean = 5, sd = sqrt(17))
plot(a,b, type ="l", xlab = "x", ylab= "density")
# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
a <- seq(-8, 18, by = .01)
# Choose the mean as 2.5 and standard deviation as 0.5.
b <- dnorm(a ,mean = 5, sd = sqrt(17))
plot(a,b, type ="l", xlab = "x", ylab= "density")
sample = c(387, 419, 404, 395, 402, 378, 389, 415, 386, 385, 391, 384, 416, 404, 379, 353, 421, 353, 410, 389)
mean(sample)
mu = 0
for(i in length(sample)){
mu = 1/length(sample)*sample[i]
}
mu
mu = 0
for(i in length(sample)){
mu = mu + 1/length(sample)*sample[i]
}
mu
i
sample[i]
mu = 0
for(i in length(sample)){
mu = mu + 1/length(sample)*sample[i]
}
mu
sample <- c(387, 419, 404, 395, 402, 378, 389, 415, 386, 385, 391, 384, 416, 404, 379, 353, 421, 353, 410, 389)
mu <- 0
for(i in length(sample)){
mu <- mu + 1/length(sample)*sample[i]
}
mu
sample[i]
1/length(sample)*sample[i]
mu
mu
for(i in length(sample)){
mu <- mu + 1/length(sample)*sample[i]
}
i
mu
for(i in length(sample)){
mu <- mu + 1/length(sample)*sample[i]
}
mu
mu <- 0
for(i in seq(1,length(sample))){
mu <- mu + 1/length(sample)*sample[i]
}
mu
mean(sample)
z_alpha2 = pnorm(1-0.05/2)
sigma = 20
lower
lower = mu - z_alpha2 *sigma/sqrt(length(sample))
lower
z_alpha2
mu
upper = mu + z_alpha2 *sigma/sqrt(length(sample))
upper
summary(sample)
sd(summary(sample))
qt(0.975, df=19)
z_alpha2
z_alpha2 = pnorm(0.99/2)
sigma = 20
lower = mu - z_alpha2 *sigma/sqrt(length(sample))
upper = mu + z_alpha2 *sigma/sqrt(length(sample))
lower
upper
z_alpha2 = pnorm(0.99)
z_alpha2
z_alpha2 = dnorm(0.99)
z_alpha2
z_alpha2 = dnorm(0.99/2)
z_alpha2
z_alpha2 = qnorm(0.99/2)
z_alpha2
z_alpha2 = rnorm(0.99/2)
z_alpha2
z_alpha2 = qnorm(0.99/2)
z_alpha2
z_alpha2 = qnorm(0.99)
z_alpha2
z_alpha2 = qnorm(1-0.99/2)
z_alpha2
z_alpha2 = qnorm(1-0.01/2)
z_alpha2
sigma = 20
lower = mu - z_alpha2 *sigma/sqrt(length(sample))
upper = mu + z_alpha2 *sigma/sqrt(length(sample))
lower
upper
z_alpha2 = qnorm(1-0.05/2)
sigma = 20
lower = mu - z_alpha2 *sigma/sqrt(length(sample))
upper = mu + z_alpha2 *sigma/sqrt(length(sample))
lower
upper
#d
z_alpha2 = qnorm(1-0.01/2)
#d
z_alpha2 = qnorm(1-0.05/2)
sigma = 20
lower = mu - z_alpha2 *sigma/sqrt(1000)
upper = mu + z_alpha2 *sigma/sqrt(1000)
lower
upper
#e
z_alpha2 = qnorm(1-0.001/2)
z_alpha2
(z*20/0.5)^2
(z_alpha2*20/0.5)^2
sample <- c(387, 419, 404, 395, 402, 378, 389, 415, 386, 385, 391, 384, 416, 404, 379, 353, 421, 353, 410, 389)
mu <- 0
for(i in seq(1,length(sample))){
mu <- mu + 1/length(sample)*sample[i]
}
mu
#b
z_alpha2 = qnorm(1-0.05/2)
z_alpha2
lower = mu - z_alpha2 *sigma/sqrt(length(sample))
upper = mu + z_alpha2 *sigma/sqrt(length(sample))
lower
upper
#c
z_alpha2 = qnorm(1-0.01/2)
sigma = 20
lower = mu - z_alpha2 *sigma/sqrt(length(sample))
upper = mu + z_alpha2 *sigma/sqrt(length(sample))
z_alpha2
lower
upper
#d
z_alpha2 = qnorm(1-0.05/2)
sigma = 20
lower = mu - z_alpha2 *sigma/sqrt(1000)
upper = mu + z_alpha2 *sigma/sqrt(1000)
lower
upper
#e
z_alpha2 = qnorm(1-0.001/2)
z_alpha2
99.9/100-1
(z_alpha2*20/0.5)^2
array = c(16523.059,
16497.120 ,
16279.209 ,
16275.206 ,
15841.613 ,
15813.328,
15337.096,
15336.443,
15333.508,
15332.867)
array
array = -1* array
array
rownames(array) = c("JC",
"JC+G4",
"F81+F",
"F81+F+G4",
"K2P",
"K2P+G4",
"HKY+F",
"HKY+F+G4",
"GTR+F",
"GTR+F+G4" )
array = as.data.frame(array)
rownames(array) = c("JC",
"JC+G4",
"F81+F",
"F81+F+G4",
"K2P",
"K2P+G4",
"HKY+F",
"HKY+F+G4",
"GTR+F",
"GTR+F+G4" )
array
array["JC"]
array[,"JC"]
array["JC",]
return(2*log(array[name1,]-array[name2,]))
LRT <- function(name1, name2, array){
return(2*log(array[name1,]-array[name2,]))
}
LRT("JC", "JC+G4", array)
LRT <- function(name1, name2, array){
return(2*log(array[get(name1),]-array[get(name2),]))
}
LRT("JC", "JC+G4", array)
array["JC",]
name = "JC"
array["name,]
d
""
"
array[name,]
LRT <- function(name1, name2, array){
return(2*(array[name1,]-array[name2,]))
}
LRT("JC", "JC+G4", array)
array["LC",] - array("JC+G4")
array["LC",] - array["JC+G4",]
array["JC+G4",]
array["LC",]
array["JC",] - array["JC+G4",]
LRT("JC+G4","JC", array)
LRT("K2P", "JC", array)
LRT("F81+F", "JC", array)
LRT("K2P+G", "K2P", array)
LRT("K2P+G", "HKY+F", array)
LRT("HKY+F", "K2P" array)
LRT("HKY+F", "K2P", array)
LRT("K2P+G", "JC+G4", array)
LRT("F81+G", "JC+G4", array)
LRT("F81+F+G4", "JC+G4", array)
LRT("HKY+F", "F81+F", array)
LRT("F81+F+G4", "F81+F", array)
LRT("HKY+F+G4", "K2P+G", array)
LRT("HKY+F+G4", "F81+F+G4", array)
LRT("HKY+F+G4", "HKY+F", array)
LRT("GTR+F", "HKY+F", array)
LRT("HKY+F+G4", "HKY+F", array)
LRT("GTR+F", "HKY+F", array)
LRT("GTR+F+G4","HKY+F+G4",  array)
LRT("GTR+F","HKY+F+G4",  array)
LRT("HKY+F+G4","GTR+F",  array)
mean_x = mean(x)
x = c(4, 18, 9, 3, 5, 20, 7, 10, 13, 6)
y = c(5, 22, 9, 0, 5, 20, 6, 9, 12, 6)
mean_x = mean(x)
mean_x
mean_y = mean(y)
mean_y
cov_x = 1/(length(x)-1)*sum((x-mean_x)^2)
cov_x
var_y = 1/(length(y)-1)*sum((y-mean_y)^2)
cov_xy = mean((x-mean_x)*(y-mean_y))
cov_xy
corr_xy = cov_xy/sqrt(var_x*var_y)
var_x = 1/(length(x)-1)*sum((x-mean_x)^2)
var_y = 1/(length(y)-1)*sum((y-mean_y)^2)
cov_xy = mean((x-mean_x)*(y-mean_y))
corr_xy = cov_xy/sqrt(var_x*var_y)
corr_xy
cor(x,y)
cov(x,y)
cov_xy
cov_xy = mean(x*y)-mean_x*mean_y
cov_xy
cov_xy = mean(x*y)-mean_x*mean_y
cov_xy
cov_xy = mean((x-mean_x)*(y-mean_y))
cov_xy
var(x)
var_x
cov_xy = 1/(length(x)-1)*sum((x-mean_x)*(y-mean_y))
cov_xy
corr_xy = cov_xy/sqrt(var_x*var_y)
corr_xy
cor(x,y)
plot(x,y)
# Question 2
#a)
n = 3
sample = rnorn(n)
sample = rnorm(n)
sample
mean_sample = mean(sample)
mean_sample
sd_sample = sqrt(1/(n-1)*sum(sample-mean_sample)^2)
sd_sample
sample = rnorm(n)
mean_sample = mean(sample)
sd_sample = sqrt(1/(n-1)*sum(sample-mean_sample)^2)
mean_sample
sd_sample
sample
l = mean_sample - z*1/sqrt(n)
u = mean_sample + z*1/sqrt(n)
z = qnorm(1-0.05/2)
l = mean_sample - z*1/sqrt(n)
u = mean_sample + z*1/sqrt(n)
l
u
# CI with sample sigma
l2 = mean_sample - z*sd_sample/sqrt(n)
u2 = mean_sample + z*sd_sample/sqrt(n)
l2
u2
# CI with sample sigma
l2 = mean_sample - z*sd_sample/sqrt(n)
u2 = mean_sample + z*sd_sample/sqrt(n)
l2
u2
mean_sample
sd_sample
sd_sample = sqrt(1/(n-1)*sum(sample-mean_sample)^2)
sd_sample
n
sample
sample-mean_sample
sd_sample = sqrt(1/(n-1)*sum((sample-mean_sample)^2)
)
sd_sample = sqrt(1/(n-1))*sum((sample-mean_sample)^2)
sd_sample
# CI with sample sigma
l2 = mean_sample - z*sd_sample/sqrt(n)
u2 = mean_sample + z*sd_sample/sqrt(n)
l2
u2
res = as.data.frame(seq(1,1000))
res
1 = 1 & 2 = 2
1 == 1 & 2 == 2
1 == 1 & 2 == 3
res$contains_0 = 0
res
for (i in seq(1,1000)){
sample = rnorm(n)
mean_sample = mean(sample)
sd_sample = sqrt(1/(n-1))*sum((sample-mean_sample)^2)
l2 = mean_sample - z*sd_sample/sqrt(n)
u2 = mean_sample + z*sd_sample/sqrt(n)
if (l2 <=0 & u2 >=0){
res$contains_0[i] = 1
}
}
res
sum(res$contains_0)/1000
1 <=0 & -1 >=0
-1 <=0 & 1 >=0
0 <=0 & 1 >=0
0 <=0 & 0 >=0
1 <=0 & 1 >=0
# c)
for (n in c(5, 10, 20, 50,100)){
res = as.data.frame(seq(1,1000))
res$contains_0 = 0
for (i in seq(1,1000)){
sample = rnorm(n)
mean_sample = mean(sample)
sd_sample = sqrt(1/(n-1))*sum((sample-mean_sample)^2)
l2 = mean_sample - z*sd_sample/sqrt(n)
u2 = mean_sample + z*sd_sample/sqrt(n)
if (l2 <=0 & u2 >=0){
res$contains_0[i] = 1
}
}
print(n)
print(sum(res$contains_0)/1000)
}
# Question 3
alpha = 0.05
sigma = 0.1
sample = c(72, 72, 60, 60, 56, 90, 65, 74, 56, 64, 65, 63, 55, 71, 70, 75, 56, 57, 54, 82)
# a)
# test statistic z = x_mean - hypthetic mean/(sigma/sqrt(n))
Z = (mean(sample)-70)/(sigma/sqrt(length(sample))
# a)
# test statistic z = x_mean - hypthetic mean/(sigma/sqrt(n))
Z = (mean(sample)-70)/(sigma/sqrt(length(sample)))
Z
# a)
# test statistic z = x_mean - hypthetic mean/(sigma/sqrt(n))
Z = (mean(sample)-70)/(sigma/sqrt(length(sample)))
Z
pvalue = pnorm(Z)
pvalue
mean(sample)
sigma
sigma = 10
# a)
# test statistic z = x_mean - hypthetic mean/(sigma/sqrt(n))
Z = (mean(sample)-70)/(sigma/sqrt(length(sample)))
Z
pvalue = pnorm(Z)
pvalue
# q2 b
library(matlib)
0,0.2,0.8,nrow=7, byrow=TRUE)
T <- matrix( c(0.8,0.2,0,
0.1,0.8,0.1,
0,0.2,0.8),nrow=7, byrow=TRUE)
T <- matrix( c(0.8,0.2,0,
0.1,0.8,0.1,
0,0.2,0.8),nrow=3, byrow=TRUE)
T^5
T%*%T$*$T%*%T%*%T
T%*%T
T2 = T%*%T
T4 = T2%*%T2
T4
T2
T5 = T4%*%T
T5
pi = c(1,0,0)
pi%*%T5
T2 = T%*%T
T4 = T2%*%T2
pi = c(1,0,0)
pi%*%T4
T4
pi%*%T4
0.4872 + 1/2*0.4352
z_95 = qnorm(1-0.05/2)
z_95
qnorm(0.05/2)
12.79 -z_95*0.30/sqrt(315)
12.79 +z_95*0.30/sqrt(315)
(12.79 -12)/(0.3/sqrt(315))
qnorm(1-0.05/2)
qnorm(1-0.95/2)
qnorm(0.05/2)
qnorm(0.05)
qnorm(1-0.05)
pnorm(46)
qnorm(0.05)
qnorm(1-0.05)
(0.3/sqrt(315)
)
1/(0.3/sqrt(315))
pnorm(-2)
qnorm(0.05/2)
library(data.table)
rm(list = ls())
setwd("/Users/NilsGubela/Documents/GitHub/Softwareprojekt_Nils_Gubela/code")
data <- read.csv("result.csv", header = F)
colnames(data) <- c("sequence","structure","old occupancy","new occupancy","pauses","closest distance","closest structure","closest pause","closest occupancy")
data$length <- nchar(data$sequence)
# how many structures per length
table(data$length)
data[data$length %in% c(50, 60, 70, 80, 90, 100, 110, 120)]
data[data$length %in% c(50, 60, 70, 80, 90, 100, 110, 120),]
data = data[data$length %in% c(50, 60, 70, 80, 90, 100, 110, 120),]
# how many structures per length
table(data$length)
write.csv("result_cleaned.csv")
write.csv(data, "result_cleaned.csv",)
write.csv(data, "result_cleaned.csv",header = F)
?write.csv
write.csv(data, "result_cleaned.csv",row.names = F, col.names=F)
write.csv(data, "result_cleaned.csv",row.names = FALSE, col.names=FALSE)
write.csv(data, "result_cleaned.csv",row.names = FALSE, col.names=FALSE)
write.csv(data, "result_cleaned.csv",row.names = FALSE, col.names=FALSE)
library(data.table)
rm(list = ls())
setwd("/Users/NilsGubela/Documents/GitHub/Softwareprojekt_Nils_Gubela/code")
data <- read.csv("result_cleaned.csv", header = F)
colnames(data) <- c("sequence","structure","old occupancy","new occupancy","pauses","closest distance","closest structure","closest pause","closest occupancy")
data
colnames(data) <- c("sequence","structure","old occupancy","new occupancy","pauses","closest distance","closest structure","closest pause","closest occupancy", "length")
data$length <- nchar(data$sequence)
# how many structures per length
table(data$length)
dim(data)
data$binary_pause <- ifelse(data$pauses == "no improvement found with pausing", 0 ,1)
sum(data$binary_pause)
dim(data)
120/498
# pauses found per length
table(data$length, data$binary_pause)
data$occur_only_with_pause <- ifelse((data$`old occupancy` == 0 & data$binary_pause == 1), 1, 0)
sum(data$occur_only_with_pause)
# new structures found after pausing
table(data$length, data$occur_only_with_pause)
data$not_observable <- ifelse((data$`old occupancy` == 0 & data$binary_pause == 0), 1, 0)
sum(data$not_observable)
# not observable without and with pausing
table(data$length, data$not_observable)
hist( data$`new occupancy`-data$`old occupancy`, breaks = 50)
label <- c(rep(c("mfe","nonmfe"), 292), "mfe")
data$label = label
498/2
label <- c(rep(c("mfe","nonmfe"), 249), "mfe")
data$label = label
label <- c(rep(c("mfe","nonmfe"), 249))
data$label = label
pause_data = data[data$binary_pause == 1,]
sum(data[data$label == "mfe",]$binary_pause)
sum(data[data$label == "nonmfe",]$binary_pause)
seqs <- unique(data$sequence)
#significant increase
data$sig_increase <- ifelse((data$binary_pause == 1 & (data$`new occupancy`/data$`old occupancy` > 1.1)), 1,0)
sum(data$sig_increase)
data$sig_increase2 <- ifelse((data$binary_pause == 1 & (data$`old occupancy` > 0.5)), 1,0)
sum(data$sig_increase2)
table(data$length, data$sig_increase)
#significant increase
data$sig_increase <- ifelse((data$binary_pause == 1 & (data$`new occupancy` -data$`old occupancy` > 0.1)), 1,0)
sum(data$sig_increase)
table(data$length, data$sig_increase)
sum(data$sig_increase)
tableI(data[data$label = "MFE",]$length, data[data$label = "MFE", data$binary_pause = 1,]$length)
data[data$label = "MFE",]$length
data[data$label == "MFE",]$length
data$label == "MFE"
data[data$label == "mfe",]$length
tableI(data[data$label == "mfe",]$length, data[data$label == "mfe", data$binary_pause == 1,]$length)
table(data[data$label == "mfe",]$length, data[data$label == "mfe", data$binary_pause == 1,]$length)
table(data[data$label == "mfe",]$length, data[data$label == "mfe",]$binary_pause)
sum(data[data$label == "mfe",]$binary_pause)
# not observable without and with pausing
table(data$length, data$not_observable)
# new structures found after pausing
table(data$length, data$occur_only_with_pause)
sum(data$occur_only_with_pause)
