%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Dec  2 17:22:17 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -noLP -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CAUCCAGUAAUUCCAGACGGGUGUAAAGCUCGGACCAGCCGCUAUAUGCGACAGAGGGUUCAUUAUUAAC\
) def
/coor [
[58.46673584 131.75735474]
[45.36715317 139.06495667]
[32.26757050 146.37254333]
[19.16798592 153.68013000]
[6.06840229 160.98773193]
[-0.14330961 168.12840271]
[-7.77622557 168.31416321]
[-21.18622589 175.03515625]
[-23.58234024 190.36611938]
[-34.55597687 201.33694458]
[-49.88754654 203.72912598]
[-63.68175125 196.62281799]
[-70.63443756 182.75056458]
[-68.07215881 167.44648743]
[-56.98015213 156.59536743]
[-41.62353134 154.36964417]
[-27.90722847 161.62516785]
[-14.49722767 154.90415955]
[-1.23919034 147.88815308]
[11.86039352 140.58055115]
[24.95997620 133.27296448]
[38.05955887 125.96537018]
[51.15914536 118.65777588]
[47.80360031 103.01290894]
[49.33673096 87.08586121]
[55.61494446 72.36833954]
[66.05023193 60.23877716]
[79.66522217 51.83322144]
[95.18476105 47.93892670]
[111.15528870 48.92063522]
[126.08101654 54.68639755]
[138.56401062 64.69619751]
[150.96649170 56.25946045]
[163.36897278 47.82271957]
[175.77145386 39.38598251]
[188.17391968 30.94924164]
[187.71125793 12.17578983]
[198.26161194 -3.18539619]
[215.67907715 -9.39575195]
[233.29202271 -4.25545025]
[244.46875000 -14.25948334]
[255.64549255 -24.26351547]
[257.96447754 -40.13808441]
[271.89361572 -48.09787369]
[286.74768066 -42.03681946]
[291.13189697 -26.60444450]
[281.68307495 -13.63914204]
[265.64950562 -13.08678532]
[254.47279358 -3.08275199]
[243.29605103 6.92128086]
[246.61303711 18.13134193]
[245.34469604 29.80559540]
[239.64704895 40.13362885]
[230.36611938 47.49812698]
[218.91253662 50.72809982]
[207.04722595 49.28492737]
[196.61065674 43.35171890]
[184.20819092 51.78845978]
[171.80570984 60.22519684]
[159.40322876 68.66193390]
[147.00076294 77.09867859]
[151.38220215 90.33504486]
[152.10954285 104.25875092]
[149.13107300 117.87958527]
[142.65858459 130.22889709]
[133.15240479 140.42845154]
[121.28855133 147.75289917]
[107.91074371 151.68135071]
[93.97035217 151.93443298]
[80.45876312 148.49414062]
] def
/pairs [
[1 23]
[2 22]
[3 21]
[4 20]
[5 19]
[7 18]
[8 17]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
