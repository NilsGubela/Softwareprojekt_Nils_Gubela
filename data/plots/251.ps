%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Wed Dec 15 18:03:17 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGCUUCCUGACGCUACCCCACACCGGGGCCGCCGAAGCUCCGUUGAAGGGUCACGAGCUAAGCUAUCUAACCCUGUGGCCCGGAUUGGUC\
) def
/coor [
[91.21414185 109.32582855]
[76.48372650 112.15689087]
[61.75331497 114.98796082]
[47.02289963 117.81902313]
[32.29248810 120.65008545]
[17.56207466 123.48114777]
[14.06007004 131.58460999]
[7.61700153 137.47850037]
[-0.58399826 140.18661499]
[-9.07965088 139.30818176]
[-16.38753700 135.07516479]
[-21.26475525 128.29797363]
[-36.24464798 129.07438660]
[-46.79893112 140.53060913]
[-62.00173187 141.10461426]
[-72.85844421 130.97210693]
[-87.83833313 131.74853516]
[-102.81822205 132.52494812]
[-117.79811859 133.30137634]
[-129.56463623 144.20681763]
[-145.40495300 141.66444397]
[-153.16775513 127.62454224]
[-146.89805603 112.85733032]
[-131.40545654 108.69094849]
[-118.57453918 118.32147980]
[-103.59464264 117.54505920]
[-88.61475372 116.76863861]
[-73.63485718 115.99221802]
[-63.88386536 104.79161072]
[-48.70318604 103.79081726]
[-37.02106857 114.09449768]
[-22.04117584 113.31807709]
[-5.52856874 99.46440887]
[14.73101044 108.75073242]
[29.46142387 105.91967010]
[44.19183731 103.08860779]
[58.92224884 100.25754547]
[73.65266418 97.42648315]
[88.38307953 94.59541321]
[102.94720459 91.00568390]
[117.30599976 86.66690063]
[131.66479492 82.32811737]
[134.18417358 68.45089722]
[142.43582153 57.09479523]
[154.73875427 50.47488785]
[168.62904358 49.85134506]
[181.35316467 55.28993988]
[190.41384888 65.66043854]
[204.91384888 61.81985474]
[219.41384888 57.97926712]
[233.91383362 54.13867950]
[248.41383362 50.29809570]
[262.91381836 46.45750809]
[277.41381836 42.61692047]
[291.91381836 38.77633667]
[305.64495850 32.73842621]
[318.27645874 24.64862633]
[330.90795898 16.55882645]
[340.98519897 2.92483687]
[356.87603760 8.83398628]
[355.59683228 25.73960686]
[338.99777222 29.19034004]
[326.36627197 37.28013992]
[313.73474121 45.36994171]
[328.33950806 48.79061890]
[338.95013428 59.39318466]
[342.38192749 73.99533844]
[337.60482788 88.21431732]
[326.05267334 97.78236389]
[311.19274902 99.82769012]
[297.48522949 93.73638916]
[289.04434204 81.33673859]
[288.40356445 66.35043335]
[295.75442505 53.27633286]
[281.25442505 57.11692047]
[266.75442505 60.95750427]
[252.25442505 64.79808807]
[237.75442505 68.63867950]
[223.25442505 72.47926331]
[208.75442505 76.31984711]
[194.25444031 80.16043854]
[190.46806335 95.76731110]
[179.30802917 107.44486237]
[163.70982361 111.98638916]
[147.84455872 108.08025360]
[136.00357056 96.68691254]
[121.64478302 101.02569580]
[107.28598785 105.36447906]
[104.90432739 108.70218658]
[100.98535919 110.88570404]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[12 32]
[13 31]
[16 28]
[17 27]
[18 26]
[19 25]
[40 88]
[41 87]
[42 86]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
