%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Wed Dec 15 18:06:51 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CCGUUAAAGCUCAAAACCCAGCUUGGUCCACGUGCUCAUAAAUCCAAUCUGUAGUUUCCAAACAGGGGCUGUCCGCAGGAGUGUAUAAUGCAUUUUAUAA\
) def
/coor [
[141.77911377 278.89712524]
[153.19982910 268.77142334]
[149.05529785 254.35536194]
[144.91076660 239.93930054]
[140.76625061 225.52323914]
[136.62171936 211.10717773]
[121.62099457 203.68304443]
[116.44775391 187.41294861]
[124.72485352 172.09848022]
[120.13399506 157.81828308]
[115.54313660 143.53808594]
[110.95227814 129.25788879]
[94.79579163 129.50070190]
[81.36701965 121.79187012]
[74.09548950 108.88975525]
[74.42887115 94.75733185]
[81.58913422 83.35654449]
[74.02189636 70.40522003]
[66.45465088 57.45389175]
[51.13977432 55.79234695]
[39.87155533 45.55122375]
[36.83032608 30.81300926]
[42.97713470 17.27215576]
[35.40989304 4.32083035]
[27.84264946 -8.63049507]
[20.27540588 -21.58182144]
[6.83873081 -23.51333809]
[-2.85123324 -32.73859024]
[-5.36548138 -45.68005753]
[0.00378381 -57.50600052]
[-7.15701437 -70.68640137]
[-14.12730503 -76.86763763]
[-14.32829189 -84.38994598]
[-21.07571793 -97.78666687]
[-27.82314301 -111.18339539]
[-42.92672729 -109.68465424]
[-57.55075836 -113.74694061]
[-69.71746063 -122.82084656]
[-77.78137970 -135.67921448]
[-80.65194702 -150.58305359]
[-77.94093323 -165.51673889]
[-70.01498413 -178.46060181]
[-57.94602203 -187.66410828]
[-43.36627197 -191.88255310]
[-28.24752426 -190.54542542]
[-14.63446617 -183.83357239]
[-4.36815310 -172.65469360]
[1.16298068 -158.52066040]
[1.21089518 -143.34297180]
[-4.23088980 -129.17428589]
[-14.42641735 -117.93081665]
[-7.67899179 -104.53409576]
[-0.93156630 -91.13736725]
[6.02338648 -77.84719849]
[13.18418503 -64.66680145]
[29.43447685 -60.65838242]
[38.00020981 -45.88993835]
[33.22673035 -29.14906311]
[40.79397583 -16.19773865]
[48.36121750 -3.24641275]
[55.92845917 9.70491314]
[70.74279785 10.99851990]
[82.08895111 20.88430214]
[85.47801208 35.72908783]
[79.40597534 49.88665009]
[86.97322083 62.83797455]
[94.54045868 75.78929901]
[116.47013855 77.31972504]
[131.10610962 97.10401917]
[145.95941162 95.01128387]
[160.81271362 92.91855621]
[173.39161682 82.39700317]
[188.69796753 88.28322601]
[190.98590088 104.52198792]
[177.90177917 114.40824127]
[162.90544128 107.77185822]
[148.05213928 109.86458588]
[133.19883728 111.95731354]
[125.23247528 124.66703796]
[129.82333374 138.94723511]
[134.41418457 153.22743225]
[139.00505066 167.50762939]
[151.70722961 172.29609680]
[159.17559814 183.39674377]
[158.83488464 196.57577515]
[151.03778076 206.96264648]
[155.18231201 221.37870789]
[159.32682800 235.79476929]
[163.47135925 250.21084595]
[167.61589050 264.62689209]
[182.67050171 267.14111328]
[195.13841248 275.94534302]
[202.54409790 289.29144287]
[203.41716003 304.52957153]
[197.58425903 318.63418579]
[186.20350647 328.80477905]
[171.53456116 333.02200317]
[156.48995972 330.44851685]
[144.05682373 321.59527588]
[136.70375061 308.22012329]
] def
/pairs [
[2 90]
[3 89]
[4 88]
[5 87]
[6 86]
[9 82]
[10 81]
[11 80]
[12 79]
[17 67]
[18 66]
[19 65]
[23 61]
[24 60]
[25 59]
[26 58]
[30 55]
[31 54]
[33 53]
[34 52]
[35 51]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
