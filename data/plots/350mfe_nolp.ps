%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Wed Dec 15 18:07:39 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -noLP -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CCGUUAAAGCUCAAAACCCAGCUUGGUCCACGUGCUCAUAAAUCCAAUCUGUAGUUUCCAAACAGGGGCUGUCCGCAGGAGUGUAUAAUGCAUUUUAUAA\
) def
/coor [
[72.63428497 122.97864532]
[83.68531799 112.83415985]
[70.61787415 120.19907379]
[57.55043030 127.56398773]
[53.40740204 147.04942322]
[36.67232895 157.29681396]
[18.00854111 152.28323364]
[5.68420601 160.83370972]
[-6.64012861 169.38420105]
[-18.96446419 177.93467712]
[-31.28879738 186.48516846]
[-31.49198532 202.00091553]
[-40.80324554 214.41380310]
[-55.64221191 218.95085144]
[-70.30299377 213.86744690]
[-79.14823151 201.11827087]
[-78.77674103 185.60563660]
[-69.33136749 173.29447937]
[-54.44405746 168.91868591]
[-39.83928299 174.16082764]
[-27.51494789 165.61035156]
[-15.19061279 157.05986023]
[-2.86627793 148.50938416]
[9.45805645 139.95889282]
[8.49175739 129.43450928]
[12.09846973 119.41339874]
[19.66529846 111.80275726]
[29.81891060 108.08197021]
[40.67448044 109.01541138]
[50.18552017 114.49654388]
[63.25296402 107.13162994]
[76.32040405 99.76671600]
[61.39469528 101.25775146]
[46.76679993 97.93741608]
[33.94748688 90.14862823]
[24.26074028 78.69581604]
[18.70700455 64.76182556]
[17.85987091 49.78576660]
[21.80683136 35.31436157]
[30.14024353 22.84222412]
[41.99943161 13.65747452]
[56.15958023 8.70871449]
[71.15822601 8.50705242]
[85.44630432 13.07331753]
[97.54814911 21.93590355]
[106.21386719 34.17948151]
[110.54847717 48.53953552]
[110.10429382 63.53295898]
[104.92628479 77.61283112]
[115.77742004 67.25653076]
[126.62854767 56.90023422]
[137.47967529 46.54393387]
[147.66596985 35.53305435]
[157.14802551 23.91019821]
[166.63006592 12.28734112]
[176.11210632 0.66448468]
[185.59416199 -10.95837212]
[195.07620239 -22.58122826]
[193.23210144 -38.27756119]
[203.09254456 -50.62856674]
[218.80749512 -52.30661392]
[231.05355835 -42.31614685]
[232.56535339 -26.58433342]
[222.44598389 -14.44457722]
[206.69906616 -13.09918213]
[197.21701050 -1.47632551]
[187.73497009 10.14653111]
[178.25291443 21.76938820]
[168.77087402 33.39224243]
[159.28883362 45.01510239]
[159.55625916 47.97699356]
[158.55902100 51.22883606]
[156.17805481 54.24643326]
[152.50277710 56.47227859]
[147.83598328 57.39506531]
[136.98484802 67.75136566]
[126.13372040 78.10766602]
[115.28258514 88.46396637]
[115.74908447 103.45671082]
[127.22306824 113.11836243]
[138.69706726 122.78002167]
[150.17105103 132.44168091]
[161.64503479 142.10333252]
[173.11901855 151.76498413]
[184.59301758 161.42665100]
[200.60339355 167.00375366]
[199.67634583 183.93234253]
[183.15270996 187.72782898]
[174.93135071 172.90063477]
[163.45736694 163.23898315]
[151.98338318 153.57731628]
[140.50938416 143.91566467]
[129.03540039 134.25401306]
[117.56141663 124.59235382]
[106.08742523 114.93069458]
[115.06388855 126.94831848]
[114.80576324 141.94609070]
[105.42107391 153.64770508]
[90.83716583 157.15621948]
[77.15716553 151.00335693]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[49 78]
[50 77]
[51 76]
[52 75]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
