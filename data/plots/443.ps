%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Wed Dec 15 18:10:36 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGGGUCAUGCAGCCAGCAGUAGUAACAGUCGAGACUGUCUAAGACGGAGGAUCUACAGCUCUCGGACAGGUGUUUCAGUCUAAUAGAGGGCCUCAUUAGUUACAACCGGUCUAGUCGAGC\
) def
/coor [
[92.98392487 347.60992432]
[84.16551208 335.47586060]
[80.84167480 320.84613037]
[74.43385315 334.40856934]
[68.02602386 347.97100830]
[73.59164429 362.76287842]
[66.99169159 377.12310791]
[52.14180374 382.53204346]
[37.85215759 375.78063965]
[32.60054016 360.87438965]
[39.50265121 346.65692139]
[54.46358490 341.56320190]
[60.87141037 328.00076294]
[67.27923584 314.43832397]
[66.19397736 305.45932007]
[72.30687714 297.31573486]
[74.24868011 282.44195557]
[66.62317657 266.69384766]
[77.78388214 252.11807251]
[79.33889771 237.19889832]
[72.96269226 223.73808289]
[82.08893585 210.81437683]
[83.64395905 195.89520264]
[85.19897461 180.97602844]
[86.75399017 166.05683899]
[88.30900574 151.13766479]
[89.67021179 136.19955444]
[90.83739471 121.24503326]
[92.00457764 106.29051208]
[89.41866302 98.54454041]
[93.40113068 90.96456909]
[94.95614624 76.04538727]
[96.51116180 61.12620544]
[90.24617767 46.59828186]
[99.26119995 34.74169159]
[100.81621552 19.82251167]
[94.55123138 5.29458761]
[103.56625366 -6.56200123]
[105.12126923 -21.48118210]
[106.67628479 -36.40036011]
[108.23130035 -51.31954193]
[109.39848328 -66.27406311]
[110.17704010 -81.25384521]
[110.95559692 -96.23362732]
[111.73415375 -111.21340179]
[112.31818390 -126.20203400]
[112.70759583 -141.19697571]
[113.09700775 -156.19192505]
[113.48641205 -171.18685913]
[106.10998535 -185.18325806]
[114.17508698 -197.70536804]
[114.56449127 -212.70031738]
[114.95390320 -227.69525146]
[115.34331512 -242.69020081]
[101.57839203 -249.20532227]
[91.65837860 -260.76013184]
[87.30197144 -275.35263062]
[89.26394653 -290.45465088]
[97.20437622 -303.44961548]
[109.74754333 -312.08612061]
[124.72025299 -314.86779785]
[139.52841187 -311.31271362]
[151.60639954 -302.03683472]
[158.86163330 -288.64721680]
[160.03710938 -273.46374512]
[154.92916870 -259.11700439]
[144.42279053 -248.09268188]
[130.33825684 -242.30079651]
[129.94885254 -227.30584717]
[129.55943298 -212.31089783]
[129.17002869 -197.31596375]
[136.57431030 -184.39210510]
[128.48135376 -170.79745483]
[128.09194946 -155.80250549]
[127.70253754 -140.80757141]
[127.31313324 -125.81262207]
[130.32119751 -118.96170807]
[126.71393585 -110.43484497]
[125.93537903 -95.45507050]
[125.15682220 -80.47528839]
[124.37826538 -65.49550629]
[126.93730927 -61.33250809]
[126.82315063 -55.49722672]
[123.15048218 -49.76452637]
[121.59546661 -34.84534454]
[120.04045105 -19.92616463]
[118.48543549 -5.00698566]
[124.86164093 8.45381927]
[115.73539734 21.37752914]
[114.18038177 36.29670715]
[120.55657959 49.75751495]
[111.43033600 62.68122101]
[109.87532043 77.60040283]
[108.32030487 92.51958466]
[106.95909882 107.45768738]
[105.79191589 122.41220856]
[104.62473297 137.36672974]
[107.09780884 146.28881836]
[103.22817993 152.69267273]
[101.67316437 167.61186218]
[100.11814880 182.53103638]
[98.56313324 197.45021057]
[97.00811768 212.36940002]
[103.27310181 226.89732361]
[94.25807953 238.75390625]
[92.70306396 253.67309570]
[100.24044800 264.23690796]
[98.56224823 276.69909668]
[89.12245941 284.38375854]
[87.18065643 299.25753784]
[97.88408661 288.74865723]
[111.86239624 283.30746460]
[126.85382843 283.81436157]
[140.43267822 290.18734741]
[150.40180969 301.39523315]
[155.14813232 315.62451172]
[153.90370178 330.57278442]
[146.86985779 343.82138062]
[135.18470764 353.22656250]
[120.73899078 357.26651001]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[16 110]
[17 109]
[19 106]
[20 105]
[22 103]
[23 102]
[24 101]
[25 100]
[26 99]
[27 97]
[28 96]
[29 95]
[31 94]
[32 93]
[33 92]
[35 90]
[36 89]
[38 87]
[39 86]
[40 85]
[41 84]
[42 81]
[43 80]
[44 79]
[45 78]
[46 76]
[47 75]
[48 74]
[49 73]
[51 71]
[52 70]
[53 69]
[54 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
