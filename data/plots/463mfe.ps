%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Wed Dec 15 18:18:34 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UAUUUAGGUGCGGAGGUAUUUGACAUUUGCGCUUCCAUCUUGAUGUAAAGGGACGCCGGAUGGAACGGUGGUAAGCGGCUGGCUGGCGUAAUGUUUGAUGCGUGUGUAUGCGAUUGCCGG\
) def
/coor [
[56.22031021 503.55783081]
[49.25396347 490.27362061]
[49.09942245 475.27441406]
[55.79057693 461.84948730]
[67.86007690 452.94293213]
[82.66110229 450.50787354]
[96.94783783 455.07833862]
[107.58686829 465.65145874]
[106.03185272 450.73226929]
[104.47683716 435.81311035]
[102.92182159 420.89392090]
[101.36680603 405.97473145]
[92.35178375 394.11816406]
[98.61676025 379.59020996]
[89.60174561 367.73364258]
[95.86672211 353.20571899]
[94.31170654 338.28652954]
[92.75669098 323.36734009]
[91.20167542 308.44818115]
[89.64665985 293.52899170]
[80.63164520 281.67239380]
[86.89662170 267.14447021]
[85.34160614 252.22529602]
[83.78659058 237.30612183]
[82.23157501 222.38693237]
[80.67655945 207.46775818]
[79.12154388 192.54858398]
[75.25191498 186.14471436]
[77.72499084 177.22264099]
[76.55780792 162.26811218]
[75.39063263 147.31359863]
[74.22344971 132.35906982]
[73.05626678 117.40454865]
[68.08895874 103.25090027]
[59.65448761 90.84687805]
[51.22001648 78.44286346]
[42.78554153 66.03884125]
[34.35107040 53.63482285]
[25.91660118 41.23080444]
[17.48212814 28.82678604]
[3.32407689 21.76561546]
[2.56579733 6.89032412]
[-4.94062376 1.47060812]
[-5.92172527 -5.94700050]
[-14.03133774 -18.56580353]
[-22.14094925 -31.18460655]
[-37.63539505 -34.29872131]
[-46.31992722 -47.50305557]
[-43.04217148 -62.96371078]
[-29.74675560 -71.50815582]
[-14.32161999 -68.06712341]
[-5.91822100 -54.68211365]
[-9.52214718 -39.29421997]
[-1.41253471 -26.67541504]
[6.69707775 -14.05661297]
[14.96981621 -1.54414713]
[28.52457809 4.62980509]
[29.88614845 20.39231491]
[38.32061768 32.79633331]
[46.75509262 45.20035172]
[55.18956375 57.60437012]
[63.62403488 70.00839233]
[72.05850220 82.41240692]
[80.49297333 94.81642914]
[90.34689331 84.29213715]
[103.46260834 83.67333221]
[112.83668518 71.96322632]
[122.21076965 60.25311661]
[131.58485413 48.54300690]
[134.16880798 32.93423462]
[148.16287231 27.83372498]
[150.10087585 11.54949379]
[165.27702332 5.33528662]
[178.07940674 15.58374786]
[175.33802795 31.75213814]
[159.87298584 37.20780563]
[157.95951843 51.97899246]
[143.29495239 57.91708755]
[133.92086792 69.62719727]
[124.54679871 81.33730316]
[115.17271423 93.04740906]
[117.10306549 103.99457550]
[111.62490845 114.31016541]
[100.44613647 119.30529022]
[88.01078796 116.23737335]
[89.17797089 131.19189453]
[90.34515381 146.14640808]
[91.51232910 161.10093689]
[92.67951202 176.05545044]
[94.04072571 190.99356079]
[95.59574127 205.91275024]
[97.15075684 220.83192444]
[98.70577240 235.75109863]
[100.26078796 250.67028809]
[101.81580353 265.58944702]
[110.94204712 278.51318359]
[104.56584167 291.97396851]
[106.12085724 306.89315796]
[107.67587280 321.81234741]
[109.23088837 336.73150635]
[110.78590393 351.65069580]
[119.91214752 364.57440186]
[113.53594208 378.03521729]
[122.66218567 390.95892334]
[116.28598022 404.41970825]
[117.84099579 419.33889771]
[119.39601135 434.25808716]
[120.95102692 449.17727661]
[122.50604248 464.09643555]
[126.16845703 478.64245605]
[131.86369324 492.51922607]
[145.16526794 502.11090088]
[143.24043274 518.39666748]
[128.06932068 524.62316895]
[115.25864410 514.38507080]
[117.98694611 498.21444702]
[112.29170227 484.33770752]
[107.92761993 498.68884277]
[97.50835419 509.47952271]
[83.31882477 514.34338379]
] def
/pairs [
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[14 103]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[42 56]
[44 55]
[45 54]
[46 53]
[66 81]
[67 80]
[68 79]
[69 78]
[71 76]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
