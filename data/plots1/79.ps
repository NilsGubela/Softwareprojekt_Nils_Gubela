%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Sun Dec 12 11:30:01 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AAUGUGUUAUCAGCCGCUAGUCCCGACCUUAGGUCCCAUCCCCGCCCCCGCAAAACUGGAUGGCACCAAACCUAUUAGAGUGACCAGUCAUGCCUGGUUA\
) def
/coor [
[269.03469849 343.26943970]
[253.05642700 344.05029297]
[237.24636841 341.57574463]
[222.26107788 335.94641113]
[208.72332764 327.39398193]
[197.19615173 316.27169800]
[188.15946960 303.03967285]
[181.99014282 288.24594116]
[178.94616699 272.50378418]
[179.15599060 256.46615601]
[182.61299133 240.79884338]
[189.17573547 226.15258789]
[198.57376099 213.13616943]
[188.38746643 202.12528992]
[178.20117188 191.11441040]
[168.01487732 180.10354614]
[157.65858459 169.25241089]
[147.13478088 158.56364441]
[136.61097717 147.87489319]
[126.08717346 137.18612671]
[115.56336975 126.49736786]
[99.31957245 133.40559387]
[80.46720886 130.35336304]
[65.04167938 116.78166962]
[58.76322174 95.70098114]
[44.41335678 91.33275604]
[30.06348991 86.96453857]
[15.71362400 82.59631348]
[-1.19978714 83.76800537]
[-7.00778437 67.83993530]
[6.68999958 57.84958649]
[20.08184433 68.24645233]
[34.43170929 72.61466980]
[48.78157806 76.98289490]
[63.13144302 81.35111237]
[68.71542358 76.34420013]
[58.21646881 65.63103485]
[44.12687683 60.48483276]
[41.28841019 45.75584412]
[52.45650101 35.74216461]
[66.78977203 40.16452789]
[70.37437439 54.72957230]
[79.88338470 66.33038330]
[85.46736908 61.32346725]
[82.68415070 46.58393860]
[71.58735657 34.50944901]
[76.75328827 18.94522095]
[92.86766815 15.90239620]
[103.35340881 28.51117325]
[97.42367554 43.80072403]
[100.20689392 58.54025269]
[119.70694733 66.60321808]
[131.50898743 82.39205170]
[133.40679932 100.61860657]
[126.25212860 115.97357178]
[136.77592468 126.66233063]
[147.29972839 137.35108948]
[157.82353210 148.03984070]
[168.34733582 158.72860718]
[176.75416565 162.74331665]
[179.02575684 169.91725159]
[189.21205139 180.92813110]
[199.39834595 191.93899536]
[209.58464050 202.94987488]
[221.52186584 195.46250916]
[234.59822083 190.22221375]
[248.39512634 187.39530945]
[262.47116089 187.07084656]
[276.37625122 189.25785828]
[289.66595459 193.88511658]
[301.91586304 200.80340576]
[312.73489380 209.79032898]
[321.77801514 220.55754089]
[328.75711060 232.75988770]
[333.45016479 246.00656128]
[335.70843506 259.87356567]
[335.46099854 273.91729736]
[332.71710205 287.68878174]
[327.56582642 300.74789429]
[320.17312622 312.67764282]
[310.77645874 323.09722900]
[319.89245605 335.00936890]
[329.00845337 346.92147827]
[338.12445068 358.83361816]
[347.24041748 370.74572754]
[356.35641479 382.65786743]
[365.47241211 394.57000732]
[381.16986084 396.40444946]
[390.90682983 408.85305786]
[388.90649414 424.53024292]
[376.35565186 434.13504028]
[360.70046997 431.96905518]
[351.22891235 419.31738281]
[353.56030273 403.68597412]
[344.44430542 391.77386475]
[335.32830811 379.86172485]
[326.21231079 367.94961548]
[317.09631348 356.03747559]
[307.98034668 344.12536621]
[298.86434937 332.21322632]
] def
/pairs [
[13 64]
[14 63]
[15 62]
[16 61]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[25 35]
[26 34]
[27 33]
[28 32]
[44 51]
[45 50]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
