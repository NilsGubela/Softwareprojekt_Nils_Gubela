%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Sun Dec 12 11:32:18 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AAUGUGUUAUCAGCCGCUAGUCCCGACCUUAGGUCCCAUCCCCGCCCCCGCAAAACUGGAUGGCACCAAACCUAUUAGAGUGACCAGUCAUGCCUGGUUA\
) def
/coor [
[305.74990845 328.98825073]
[295.56359863 317.97738647]
[285.37731934 306.96652222]
[275.19100952 295.95562744]
[260.86846924 291.86737061]
[257.17660522 276.48294067]
[246.99029541 265.47204590]
[236.80400085 254.46118164]
[222.30821228 257.88720703]
[207.94831848 253.56872559]
[197.60969543 242.56965637]
[194.14190674 227.77536011]
[198.57376099 213.13616943]
[188.38746643 202.12528992]
[178.20117188 191.11441040]
[168.01487732 180.10354614]
[157.65858459 169.25241089]
[147.13478088 158.56364441]
[136.61097717 147.87489319]
[126.08717346 137.18612671]
[115.56336975 126.49736786]
[99.31957245 133.40559387]
[80.46720886 130.35336304]
[65.04167938 116.78166962]
[58.76322174 95.70098114]
[44.41335678 91.33275604]
[30.06348991 86.96453857]
[15.71362400 82.59631348]
[-1.19978714 83.76800537]
[-7.00778437 67.83993530]
[6.68999958 57.84958649]
[20.08184433 68.24645233]
[34.43170929 72.61466980]
[48.78157806 76.98289490]
[63.13144302 81.35111237]
[68.71542358 76.34420013]
[58.21646881 65.63103485]
[44.12687683 60.48483276]
[41.28841019 45.75584412]
[52.45650101 35.74216461]
[66.78977203 40.16452789]
[70.37437439 54.72957230]
[79.88338470 66.33038330]
[85.46736908 61.32346725]
[82.68415070 46.58393860]
[71.58735657 34.50944901]
[76.75328827 18.94522095]
[92.86766815 15.90239620]
[103.35340881 28.51117325]
[97.42367554 43.80072403]
[100.20689392 58.54025269]
[119.70694733 66.60321808]
[131.50898743 82.39205170]
[133.40679932 100.61860657]
[126.25212860 115.97357178]
[136.77592468 126.66233063]
[147.29972839 137.35108948]
[157.82353210 148.03984070]
[168.34733582 158.72860718]
[176.75416565 162.74331665]
[179.02575684 169.91725159]
[189.21205139 180.92813110]
[199.39834595 191.93899536]
[209.58464050 202.94987488]
[224.52388000 199.66865540]
[239.00407410 204.27523804]
[249.16674805 215.43705750]
[252.35664368 230.08905029]
[247.81488037 244.27488708]
[258.00119019 255.28576660]
[268.18746948 266.29663086]
[283.23861694 271.17248535]
[286.20190430 285.76934814]
[296.38818359 296.78021240]
[306.57449341 307.79110718]
[316.76077271 318.80197144]
[326.46246338 317.88711548]
[335.32620239 321.58810425]
[341.32009888 328.91464233]
[343.13739014 338.06253052]
[340.47949219 346.85693359]
[349.59548950 358.76907349]
[358.71148682 370.68118286]
[367.82745361 382.59332275]
[376.94345093 394.50543213]
[386.05944824 406.41757202]
[395.17544556 418.32968140]
[410.87289429 420.16415405]
[420.60983276 432.61276245]
[418.60949707 448.28994751]
[406.05865479 457.89474487]
[390.40350342 455.72875977]
[380.93194580 443.07708740]
[383.26330566 427.44567871]
[374.14730835 415.53356934]
[365.03134155 403.62142944]
[355.91534424 391.70932007]
[346.79934692 379.79718018]
[337.68334961 367.88507080]
[328.56738281 355.97293091]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[6 71]
[7 70]
[8 69]
[13 64]
[14 63]
[15 62]
[16 61]
[17 59]
[18 58]
[19 57]
[20 56]
[21 55]
[25 35]
[26 34]
[27 33]
[28 32]
[44 51]
[45 50]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
